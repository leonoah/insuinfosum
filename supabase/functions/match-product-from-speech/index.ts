import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.57.4';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { text } = await req.json();
    
    if (!text) {
      throw new Error('No text provided');
    }

    console.log('üîç Matching product from speech:', text);

    // Initialize Supabase client
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseKey);

    // Fetch all products from database
    const { data: products, error: dbError } = await supabase
      .from('products_information')
      .select('*')
      .order('company', { ascending: true });

    if (dbError) {
      console.error('‚ùå Database error:', dbError);
      throw new Error('Failed to fetch products from database');
    }

    if (!products || products.length === 0) {
      throw new Error('No products found in database');
    }

    console.log(`‚úÖ Loaded ${products.length} products from database`);

    // Get unique companies list for better AI matching
    const uniqueCompanies = [...new Set(products.map(p => p.company))].sort();
    
    // Get unique product types
    const uniqueProductTypes = [...new Set(products.map(p => p.product_type))].sort();

    // Build a map of tracks by company and product type for better matching
    const tracksByCompanyAndType: Record<string, string[]> = {};
    products.forEach(p => {
      const key = `${p.company}|${p.product_type}`;
      if (!tracksByCompanyAndType[key]) {
        tracksByCompanyAndType[key] = [];
      }
      if (!tracksByCompanyAndType[key].includes(p.track_name)) {
        tracksByCompanyAndType[key].push(p.track_name);
      }
    });

    console.log(`üìã Unique companies: ${uniqueCompanies.length}, Product types: ${uniqueProductTypes.length}`);

    const systemPrompt = `◊ê◊™◊î ◊¢◊ï◊ñ◊® ◊©◊û◊†◊™◊ó ◊ò◊ß◊°◊ò ◊©◊ú ◊§◊®◊ò◊ô ◊û◊ï◊¶◊® ◊§◊ô◊†◊†◊°◊ô ◊ï◊û◊ñ◊î◊î ◊ê◊™ ◊î◊ó◊ë◊®◊î, ◊°◊ï◊í ◊î◊û◊ï◊¶◊® ◊ï◊î◊û◊°◊ú◊ï◊ú.

◊®◊©◊ô◊û◊™ ◊õ◊ú ◊î◊ó◊ë◊®◊ï◊™ ◊î◊ñ◊û◊ô◊†◊ï◊™ ◊ë◊û◊¢◊®◊õ◊™ (${uniqueCompanies.length} ◊ó◊ë◊®◊ï◊™):
${uniqueCompanies.join(', ')}

◊°◊ï◊í◊ô ◊î◊û◊ï◊¶◊®◊ô◊ù ◊î◊ñ◊û◊ô◊†◊ô◊ù:
${uniqueProductTypes.join(', ')}

◊û◊°◊ú◊ï◊ú◊ô◊ù ◊ñ◊û◊ô◊†◊ô◊ù ◊ú◊§◊ô ◊ó◊ë◊®◊î ◊ï◊°◊ï◊í ◊û◊ï◊¶◊®:
${Object.entries(tracksByCompanyAndType).map(([key, tracks]) => {
  const [company, productType] = key.split('|');
  return `${company} - ${productType}: ${tracks.join(', ')}`;
}).slice(0, 100).join('\n')}

◊î◊û◊©◊ô◊û◊î ◊©◊ú◊ö:
1. ◊ú◊†◊™◊ó ◊ê◊™ ◊î◊ò◊ß◊°◊ò ◊ï◊ú◊ñ◊î◊ï◊™:
   - ◊©◊ù ◊î◊ó◊ë◊®◊î - ◊ó◊ô◊ô◊ë ◊ú◊î◊™◊ê◊ô◊ù ◊ë◊ì◊ô◊ï◊ß ◊ú◊ê◊ó◊™ ◊û◊î◊ó◊ë◊®◊ï◊™ ◊ë◊®◊©◊ô◊û◊î ◊ú◊û◊¢◊ú◊î
   - ◊°◊ï◊í ◊î◊û◊ï◊¶◊® - ◊ó◊ô◊ô◊ë ◊ú◊î◊™◊ê◊ô◊ù ◊ë◊ì◊ô◊ï◊ß ◊ú◊ê◊ó◊ì ◊û◊°◊ï◊í◊ô ◊î◊û◊ï◊¶◊®◊ô◊ù ◊ú◊û◊¢◊ú◊î
   - ◊û◊°◊ú◊ï◊ú ◊î◊î◊©◊ß◊¢◊î - ◊ó◊ô◊ô◊ë ◊ú◊î◊™◊ê◊ô◊ù ◊ë◊ì◊ô◊ï◊ß ◊ú◊ê◊ó◊ì ◊î◊û◊°◊ú◊ï◊ú◊ô◊ù ◊î◊ñ◊û◊ô◊†◊ô◊ù ◊ú◊ó◊ë◊®◊î ◊ï◊°◊ï◊í ◊î◊û◊ï◊¶◊®
   - ◊°◊õ◊ï◊ù (◊ê◊ù ◊û◊ï◊ñ◊õ◊®)
   - **◊ì◊û◊ô ◊†◊ô◊î◊ï◊ú** - ◊ó◊§◊© ◊ë◊ò◊ß◊°◊ò ◊ê◊™ ◊î◊û◊ô◊ú◊ô◊ù: "◊ì◊û◊ô ◊†◊ô◊î◊ï◊ú", "◊ì◊û◊ô ◊ô◊¢◊ï◊ú", "◊ì◊û◊ô◊ô ◊†◊ô◊î◊ï◊ú", "◊†◊ô◊î◊ï◊ú", ◊ê◊ï ◊õ◊ú ◊ï◊®◊ô◊ê◊¶◊ô◊î ◊ì◊ï◊û◊î

2. ◊ó◊©◊ï◊ë ◊û◊ê◊ï◊ì:
   - ◊î◊ó◊ë◊®◊î ◊ï◊î◊û◊°◊ú◊ï◊ú ◊ó◊ô◊ô◊ë◊ô◊ù ◊ú◊î◊ô◊ï◊™ ◊û◊î◊®◊©◊ô◊û◊ï◊™ ◊ú◊û◊¢◊ú◊î ◊ë◊ì◊ô◊ï◊ß
   - ◊ú◊í◊ë◊ô ◊î◊û◊°◊ú◊ï◊ú: ◊™◊û◊¶◊ê ◊ê◊™ ◊î◊î◊™◊ê◊û◊î ◊î◊õ◊ô ◊ß◊®◊ï◊ë◊î ◊û◊®◊©◊ô◊û◊™ ◊î◊û◊°◊ú◊ï◊ú◊ô◊ù ◊©◊ú ◊î◊ó◊ë◊®◊î ◊ï◊î◊û◊ï◊¶◊® ◊î◊°◊§◊¶◊ô◊§◊ô◊ô◊ù
   - ◊ê◊ù ◊û◊ï◊ñ◊õ◊® "◊û◊†◊ô◊ï◊™" ◊ó◊§◊© "◊û◊†◊ô◊ï◊™" ◊ë◊®◊©◊ô◊û◊™ ◊î◊û◊°◊ú◊ï◊ú◊ô◊ù
   - ◊ê◊ù ◊û◊ï◊ñ◊õ◊® "◊ê◊í\"◊ó" ◊ó◊§◊© ◊û◊°◊ú◊ï◊ú ◊ê◊í\"◊ó ◊ë◊®◊©◊ô◊û◊î
   - ◊™◊û◊ô◊ì ◊ó◊ú◊• ◊ê◊™ ◊ì◊û◊ô ◊î◊†◊ô◊î◊ï◊ú ◊í◊ù ◊ê◊ù ◊î◊ù ◊†◊ê◊û◊®◊ô◊ù ◊ë◊¶◊ï◊®◊î ◊ú◊ê ◊û◊ì◊ï◊ô◊ß◊™ (◊ú◊û◊©◊ú "◊ì◊û◊ô◊ô ◊ô◊¢◊ï◊ú" ◊ñ◊î "◊ì◊û◊ô ◊†◊ô◊î◊ï◊ú")
   
3. ◊ú◊î◊ó◊ñ◊ô◊® JSON ◊ë◊§◊ï◊®◊û◊ò:
{
  "companyIdentified": "◊©◊ù ◊î◊ó◊ë◊®◊î ◊î◊û◊ñ◊ï◊î◊î ◊û◊î◊ò◊ß◊°◊ò",
  "companyMatched": "◊©◊ù ◊î◊ó◊ë◊®◊î ◊î◊û◊ì◊ï◊ô◊ß ◊û◊î◊®◊©◊ô◊û◊î",
  "productType": "◊°◊ï◊í ◊î◊û◊ï◊¶◊® ◊î◊û◊ì◊ï◊ô◊ß ◊û◊î◊®◊©◊ô◊û◊î",
  "trackIdentified": "◊©◊ù ◊î◊û◊°◊ú◊ï◊ú ◊©◊ñ◊ï◊î◊î ◊û◊î◊ò◊ß◊°◊ò",
  "trackName": "◊©◊ù ◊î◊û◊°◊ú◊ï◊ú ◊î◊û◊ì◊ï◊ô◊ß ◊û◊®◊©◊ô◊û◊™ ◊î◊û◊°◊ú◊ï◊ú◊ô◊ù ◊î◊ñ◊û◊ô◊†◊ô◊ù",
  "extractedInfo": {
    "amount": ◊°◊õ◊ï◊ù ◊ê◊ù ◊û◊ï◊ñ◊õ◊® ◊ê◊ï 0,
    "managementFeeOnDeposit": ◊ì◊û◊ô ◊†◊ô◊î◊ï◊ú ◊û◊î◊§◊ß◊ì◊î ◊ê◊ù ◊û◊ï◊ñ◊õ◊® ◊ê◊ï 0,
    "managementFeeOnAccumulation": ◊ì◊û◊ô ◊†◊ô◊î◊ï◊ú ◊û◊¶◊ë◊ô◊®◊î ◊ê◊ù ◊û◊ï◊ñ◊õ◊® ◊ê◊ï 0,
    "notes": "◊õ◊ú ◊û◊ô◊ì◊¢ ◊†◊ï◊°◊£ ◊©◊†◊û◊¶◊ê"
  },
  "confidence": ◊û◊°◊§◊® ◊ë◊ô◊ü 0 ◊ú-1
}

◊ó◊©◊ï◊ë: ◊™◊û◊ô◊ì ◊™◊ó◊§◊© ◊ï◊®◊ô◊ê◊¶◊ô◊ï◊™ ◊©◊ú "◊ì◊û◊ô ◊†◊ô◊î◊ï◊ú" ◊õ◊û◊ï "◊ì◊û◊ô◊ô ◊ô◊¢◊ï◊ú", "◊ì◊û◊ô ◊ô◊¢◊ï◊ú", "◊†◊ô◊î◊ï◊ú" ◊ï◊õ◊ï'.
◊™◊û◊ô◊ì ◊î◊ó◊ñ◊® JSON ◊™◊ß◊ô◊ü ◊ë◊ú◊ë◊ì, ◊ú◊ú◊ê ◊ò◊ß◊°◊ò ◊†◊ï◊°◊£.`;

    // Send to OpenAI for analysis
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${Deno.env.get('OPENAI_API_KEY')}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: text }
        ],
        temperature: 0.1,
        max_tokens: 800,
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå OpenAI API error:', errorText);
      throw new Error(`OpenAI API error: ${errorText}`);
    }

    const result = await response.json();
    const analysisText = result.choices[0].message.content;
    
    console.log('üìÑ Raw AI analysis:', analysisText);

    // Parse the JSON response
    let matchResult;
    try {
      matchResult = JSON.parse(analysisText);
    } catch (parseError) {
      console.error('‚ùå Failed to parse JSON:', parseError);
      throw new Error('AI returned invalid JSON');
    }

    console.log('‚úÖ Match result:', matchResult);

    // Now fetch all products for the matched company and product type to find the best track match
    const { data: companyProducts, error: companyError } = await supabase
      .from('products_information')
      .select('*')
      .eq('company', matchResult.companyMatched)
      .eq('product_type', matchResult.productType);

    if (companyError) {
      console.error('‚ö†Ô∏è Error fetching company products:', companyError);
      throw new Error('Failed to fetch company products');
    }

    console.log(`üì¶ Found ${companyProducts?.length || 0} products for ${matchResult.companyMatched} - ${matchResult.productType}`);

    // Find the best matching track
    let fullProduct = null;
    if (companyProducts && companyProducts.length > 0) {
      console.log(`üîé Looking for track: "${matchResult.trackName}"`);
      console.log(`üìã Available tracks: ${companyProducts.map(p => `"${p.track_name}"`).join(', ')}`);
      
      // Try exact match first (case insensitive)
      fullProduct = companyProducts.find(p => 
        p.track_name.toLowerCase().trim() === matchResult.trackName.toLowerCase().trim()
      );
      
      if (fullProduct) {
        console.log(`‚úÖ Found exact match: "${fullProduct.track_name}"`);
      }

      // If no exact match, try to find tracks that contain the keyword
      if (!fullProduct) {
        const trackKeyword = matchResult.trackName.toLowerCase().trim();
        console.log(`üîç Searching for tracks containing: "${trackKeyword}"`);
        
        // Prioritize tracks that contain the exact keyword
        fullProduct = companyProducts.find(p => {
          const trackName = p.track_name.toLowerCase().trim();
          // Check if the track name contains the keyword as a whole word
          const wordMatch = new RegExp(`\\b${trackKeyword}\\b`).test(trackName);
          if (wordMatch) {
            console.log(`‚úÖ Found word match: "${p.track_name}"`);
            return true;
          }
          return false;
        });
      }

      // If still no match, try partial contains
      if (!fullProduct) {
        console.log(`üîç Trying partial match...`);
        fullProduct = companyProducts.find(p => {
          const trackName = p.track_name.toLowerCase().trim();
          const keyword = matchResult.trackName.toLowerCase().trim();
          const contains = trackName.includes(keyword) || keyword.includes(trackName);
          if (contains) {
            console.log(`‚úÖ Found partial match: "${p.track_name}"`);
            return true;
          }
          return false;
        });
      }

      // If still no match, take the first one
      if (!fullProduct && companyProducts.length > 0) {
        fullProduct = companyProducts[0];
        console.log(`‚ö†Ô∏è No track match found for "${matchResult.trackName}", using first product: "${fullProduct.track_name}"`);
      }
    }

    console.log('‚úÖ Final selected product:', fullProduct ? `${fullProduct.company} - ${fullProduct.track_name}` : 'null');

    return new Response(
      JSON.stringify({ 
        matchResult,
        fullProduct: fullProduct || null,
        availableTracks: companyProducts?.map(p => p.track_name) || []
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('‚ùå Error in match-product-from-speech:', error);
    return new Response(
      JSON.stringify({ error: error instanceof Error ? error.message : 'Unknown error' }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});
