import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.57.4';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { text } = await req.json();
    
    if (!text) {
      throw new Error('No text provided');
    }

    console.log('üîç Matching product from speech:', text);

    // Initialize Supabase client
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseKey);

    // Fetch all products from database
    const { data: products, error: dbError } = await supabase
      .from('products_information')
      .select('*')
      .order('company', { ascending: true });

    if (dbError) {
      console.error('‚ùå Database error:', dbError);
      throw new Error('Failed to fetch products from database');
    }

    if (!products || products.length === 0) {
      throw new Error('No products found in database');
    }

    console.log(`‚úÖ Loaded ${products.length} products from database`);

    // Get unique companies list for better AI matching
    const uniqueCompanies = [...new Set(products.map(p => p.company))].sort();
    
    // Get unique product types
    const uniqueProductTypes = [...new Set(products.map(p => p.product_type))].sort();

    console.log(`üìã Unique companies: ${uniqueCompanies.length}, Product types: ${uniqueProductTypes.length}`);

    const systemPrompt = `◊ê◊™◊î ◊¢◊ï◊ñ◊® ◊©◊û◊†◊™◊ó ◊ò◊ß◊°◊ò ◊©◊ú ◊§◊®◊ò◊ô ◊û◊ï◊¶◊® ◊§◊ô◊†◊†◊°◊ô ◊ï◊û◊ñ◊î◊î ◊ê◊™ ◊î◊ó◊ë◊®◊î, ◊°◊ï◊í ◊î◊û◊ï◊¶◊® ◊ï◊î◊û◊°◊ú◊ï◊ú.

◊®◊©◊ô◊û◊™ ◊õ◊ú ◊î◊ó◊ë◊®◊ï◊™ ◊î◊ñ◊û◊ô◊†◊ï◊™ ◊ë◊û◊¢◊®◊õ◊™ (${uniqueCompanies.length} ◊ó◊ë◊®◊ï◊™):
${uniqueCompanies.join(', ')}

◊°◊ï◊í◊ô ◊î◊û◊ï◊¶◊®◊ô◊ù ◊î◊ñ◊û◊ô◊†◊ô◊ù:
${uniqueProductTypes.join(', ')}

◊î◊û◊©◊ô◊û◊î ◊©◊ú◊ö:
1. ◊ú◊†◊™◊ó ◊ê◊™ ◊î◊ò◊ß◊°◊ò ◊ï◊ú◊ñ◊î◊ï◊™:
   - ◊©◊ù ◊î◊ó◊ë◊®◊î - ◊ó◊ô◊ô◊ë ◊ú◊î◊™◊ê◊ô◊ù ◊ë◊ì◊ô◊ï◊ß ◊ú◊ê◊ó◊™ ◊û◊î◊ó◊ë◊®◊ï◊™ ◊ë◊®◊©◊ô◊û◊î ◊ú◊û◊¢◊ú◊î (◊ú◊ê ◊ú◊î◊û◊¶◊ô◊ê ◊©◊ù ◊ó◊ì◊©!)
   - ◊°◊ï◊í ◊î◊û◊ï◊¶◊® - ◊ó◊ô◊ô◊ë ◊ú◊î◊™◊ê◊ô◊ù ◊ë◊ì◊ô◊ï◊ß ◊ú◊ê◊ó◊ì ◊û◊°◊ï◊í◊ô ◊î◊û◊ï◊¶◊®◊ô◊ù ◊ú◊û◊¢◊ú◊î
   - ◊û◊°◊ú◊ï◊ú ◊î◊î◊©◊ß◊¢◊î (◊û◊†◊ô◊ï◊™, ◊ê◊í"◊ó, ◊õ◊ú◊ú◊ô, ◊û◊©◊ï◊ú◊ë ◊ï◊õ◊ï')
   - ◊°◊õ◊ï◊ù (◊ê◊ù ◊û◊ï◊ñ◊õ◊®)
   - ◊ì◊û◊ô ◊†◊ô◊î◊ï◊ú (◊ê◊ù ◊û◊ï◊ñ◊õ◊®◊ô◊ù)

2. ◊ó◊©◊ï◊ë ◊û◊ê◊ï◊ì:
   - ◊ê◊ù ◊û◊ï◊ñ◊õ◊® ◊©◊ù ◊ó◊ë◊®◊î ◊ë◊ò◊ß◊°◊ò, ◊ó◊§◊© ◊ê◊™ ◊î◊î◊™◊ê◊û◊î ◊î◊õ◊ô ◊ß◊®◊ï◊ë◊î ◊ë◊®◊©◊ô◊û◊™ ◊î◊ó◊ë◊®◊ï◊™
   - ◊ú◊ì◊ï◊í◊û◊î: "◊ê◊†◊ú◊ô◊°◊ò" ◊û◊™◊ê◊ô◊ù ◊ú"◊ê◊†◊ú◊ô◊°◊ò" ◊û◊î◊®◊©◊ô◊û◊î
   - ◊ê◊ù ◊ú◊ê ◊ë◊ò◊ï◊ó ◊û◊î ◊î◊ó◊ë◊®◊î, ◊î◊©◊™◊û◊© ◊ë"◊ê◊ó◊®"
   
3. ◊ú◊î◊ó◊ñ◊ô◊® JSON ◊ë◊§◊ï◊®◊û◊ò:
{
  "companyIdentified": "◊©◊ù ◊î◊ó◊ë◊®◊î ◊î◊û◊ñ◊ï◊î◊î ◊û◊î◊ò◊ß◊°◊ò",
  "companyMatched": "◊©◊ù ◊î◊ó◊ë◊®◊î ◊î◊û◊ì◊ï◊ô◊ß ◊û◊î◊®◊©◊ô◊û◊î",
  "productType": "◊°◊ï◊í ◊î◊û◊ï◊¶◊® ◊î◊û◊ì◊ï◊ô◊ß ◊û◊î◊®◊©◊ô◊û◊î",
  "trackName": "◊©◊ù ◊î◊û◊°◊ú◊ï◊ú ◊©◊ñ◊ï◊î◊î",
  "extractedInfo": {
    "amount": ◊°◊õ◊ï◊ù ◊ê◊ù ◊û◊ï◊ñ◊õ◊® ◊ê◊ï 0,
    "managementFeeOnDeposit": ◊ì◊û◊ô ◊†◊ô◊î◊ï◊ú ◊û◊î◊§◊ß◊ì◊î ◊ê◊ï 0,
    "managementFeeOnAccumulation": ◊ì◊û◊ô ◊†◊ô◊î◊ï◊ú ◊û◊¶◊ë◊ô◊®◊î ◊ê◊ï 0,
    "notes": "◊î◊¢◊®◊ï◊™ ◊†◊ï◊°◊§◊ï◊™"
  },
  "confidence": ◊û◊°◊§◊® ◊ë◊ô◊ü 0 ◊ú-1
}

◊™◊û◊ô◊ì ◊î◊ó◊ñ◊® JSON ◊™◊ß◊ô◊ü ◊ë◊ú◊ë◊ì, ◊ú◊ú◊ê ◊ò◊ß◊°◊ò ◊†◊ï◊°◊£.`;

    // Send to OpenAI for analysis
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${Deno.env.get('OPENAI_API_KEY')}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: text }
        ],
        temperature: 0.1,
        max_tokens: 800,
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå OpenAI API error:', errorText);
      throw new Error(`OpenAI API error: ${errorText}`);
    }

    const result = await response.json();
    const analysisText = result.choices[0].message.content;
    
    console.log('üìÑ Raw AI analysis:', analysisText);

    // Parse the JSON response
    let matchResult;
    try {
      matchResult = JSON.parse(analysisText);
    } catch (parseError) {
      console.error('‚ùå Failed to parse JSON:', parseError);
      throw new Error('AI returned invalid JSON');
    }

    console.log('‚úÖ Match result:', matchResult);

    // Now fetch all products for the matched company and product type to find the best track match
    const { data: companyProducts, error: companyError } = await supabase
      .from('products_information')
      .select('*')
      .eq('company', matchResult.companyMatched)
      .eq('product_type', matchResult.productType);

    if (companyError) {
      console.error('‚ö†Ô∏è Error fetching company products:', companyError);
      throw new Error('Failed to fetch company products');
    }

    console.log(`üì¶ Found ${companyProducts?.length || 0} products for ${matchResult.companyMatched} - ${matchResult.productType}`);

    // Find the best matching track
    let fullProduct = null;
    if (companyProducts && companyProducts.length > 0) {
      // Try exact match first
      fullProduct = companyProducts.find(p => 
        p.track_name.toLowerCase() === matchResult.trackName.toLowerCase()
      );

      // If no exact match, try partial match
      if (!fullProduct) {
        fullProduct = companyProducts.find(p => 
          p.track_name.toLowerCase().includes(matchResult.trackName.toLowerCase()) ||
          matchResult.trackName.toLowerCase().includes(p.track_name.toLowerCase())
        );
      }

      // If still no match, take the first one
      if (!fullProduct && companyProducts.length > 0) {
        fullProduct = companyProducts[0];
        console.log('‚ö†Ô∏è No track match found, using first product');
      }
    }

    console.log('‚úÖ Selected product:', fullProduct ? `${fullProduct.company} - ${fullProduct.track_name}` : 'null');

    return new Response(
      JSON.stringify({ 
        matchResult,
        fullProduct: fullProduct || null,
        availableTracks: companyProducts?.map(p => p.track_name) || []
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('‚ùå Error in match-product-from-speech:', error);
    return new Response(
      JSON.stringify({ error: error instanceof Error ? error.message : 'Unknown error' }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});
